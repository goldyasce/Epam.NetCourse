; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	\\ws210-\incoming\545\ñòç\Stend\Plugins\Source\My\My\dllmain.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?rowSRC@@3PAUtagRGBTRIPLE@@A			; rowSRC
_BSS	SEGMENT
?rowSRC@@3PAUtagRGBTRIPLE@@A DD 01H DUP (?)		; rowSRC
_BSS	ENDS
PUBLIC	?inversion@@YAPAXPAX@Z				; inversion
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File \\ws210-\incoming\545\ñòç\stend\plugins\source\my\my\dllmain.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ?inversion@@YAPAXPAX@Z
_TEXT	SEGMENT
_i$66634 = -20						; size = 4
_j$66628 = -8						; size = 4
_BufBmp$ = 8						; size = 4
?inversion@@YAPAXPAX@Z PROC				; inversion, COMDAT
; Line 42
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 47
	mov	DWORD PTR _j$66628[ebp], 0
	jmp	SHORT $LN6@inversion
$LN5@inversion:
	mov	eax, DWORD PTR _j$66628[ebp]
	add	eax, 1
	mov	DWORD PTR _j$66628[ebp], eax
$LN6@inversion:
	mov	eax, DWORD PTR _BufBmp$[ebp]
	mov	ecx, DWORD PTR _j$66628[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jge	$LN4@inversion
; Line 49
	mov	eax, DWORD PTR _BufBmp$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _j$66628[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR ?rowSRC@@3PAUtagRGBTRIPLE@@A, eax ; rowSRC
; Line 50
	mov	DWORD PTR _i$66634[ebp], 0
	jmp	SHORT $LN3@inversion
$LN2@inversion:
	mov	eax, DWORD PTR _i$66634[ebp]
	add	eax, 1
	mov	DWORD PTR _i$66634[ebp], eax
$LN3@inversion:
	mov	eax, DWORD PTR _BufBmp$[ebp]
	mov	ecx, DWORD PTR _i$66634[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	SHORT $LN1@inversion
; Line 52
	mov	eax, DWORD PTR _i$66634[ebp]
	imul	eax, 3
	mov	ecx, DWORD PTR ?rowSRC@@3PAUtagRGBTRIPLE@@A ; rowSRC
	movzx	edx, BYTE PTR [ecx+eax]
	mov	eax, 255				; 000000ffH
	sub	eax, edx
	mov	ecx, DWORD PTR _i$66634[ebp]
	imul	ecx, 3
	mov	edx, DWORD PTR ?rowSRC@@3PAUtagRGBTRIPLE@@A ; rowSRC
	mov	BYTE PTR [edx+ecx], al
; Line 53
	mov	eax, DWORD PTR _i$66634[ebp]
	imul	eax, 3
	mov	ecx, DWORD PTR ?rowSRC@@3PAUtagRGBTRIPLE@@A ; rowSRC
	movzx	edx, BYTE PTR [ecx+eax+1]
	mov	eax, 255				; 000000ffH
	sub	eax, edx
	mov	ecx, DWORD PTR _i$66634[ebp]
	imul	ecx, 3
	mov	edx, DWORD PTR ?rowSRC@@3PAUtagRGBTRIPLE@@A ; rowSRC
	mov	BYTE PTR [edx+ecx+1], al
; Line 54
	mov	eax, DWORD PTR _i$66634[ebp]
	imul	eax, 3
	mov	ecx, DWORD PTR ?rowSRC@@3PAUtagRGBTRIPLE@@A ; rowSRC
	movzx	edx, BYTE PTR [ecx+eax+2]
	mov	eax, 255				; 000000ffH
	sub	eax, edx
	mov	ecx, DWORD PTR _i$66634[ebp]
	imul	ecx, 3
	mov	edx, DWORD PTR ?rowSRC@@3PAUtagRGBTRIPLE@@A ; rowSRC
	mov	BYTE PTR [edx+ecx+2], al
; Line 58
	jmp	$LN2@inversion
$LN1@inversion:
; Line 60
	jmp	$LN5@inversion
$LN4@inversion:
; Line 63
	mov	eax, DWORD PTR _BufBmp$[ebp]
; Line 64
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?inversion@@YAPAXPAX@Z ENDP				; inversion
_TEXT	ENDS
PUBLIC	_DllMain@12
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _DllMain@12
_TEXT	SEGMENT
tv64 = -196						; size = 4
_hModule$ = 8						; size = 4
_ul_reason_for_call$ = 12				; size = 4
_lpReserved$ = 16					; size = 4
_DllMain@12 PROC					; COMDAT
; Line 72
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 73
	mov	eax, DWORD PTR _ul_reason_for_call$[ebp]
	mov	DWORD PTR tv64[ebp], eax
; Line 82
	mov	eax, 1
; Line 83
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_DllMain@12 ENDP
_TEXT	ENDS
END
